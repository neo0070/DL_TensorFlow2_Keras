/**
 * TypeScrpt 환경 설정 파일
 * 
 * @file tsconfig.json
 * @version 0.0.1
 * @license OBCon License 1.0
 * @copyright pnuskgh, All right reserved.
 * @author gye hyun james kim <pnuskgh@gmail.com> 
 */

{
    "display": "Node 14",
    "compilerOptions": {
        "target": "ES2022",                               /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
        "lib": [ 
            "es2022"
        ],                                                /* Specify a set of bundled library declaration files that describe the target runtime environment. */
        "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
        "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
        "module": "ES2022",                               /* Specify what module code is generated. */
        "rootDir": "./",                                  /* Specify the root folder within your source files. */
        "moduleResolution": "Node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
        "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
        "paths": {
            "@base": [ "." ],
            "@efriend": [ "./packages/EFriendExpert" ],
            "@packages": [ "./packages" ],
            "@configs/*": ["../configs"], 
            "@lib/*": ["lib"] 
        },                                                /* Specify a set of entries that re-map imports to additional lookup locations. */
        "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
        "types": [ "node" ],                              /* Specify type package names to be included without being referenced in a source file. */
        "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
        "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
        "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
        "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
        "outDir": "./dist",                               /* Specify an output folder for all emitted files. */
        "removeComments": true,                           /* Disable emitting comments. */
        "noEmit": false,                                  /* Disable emitting files from a compilation. */
        "preserveValueImports": false,                    /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
        "esModuleInterop": true,                          /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
        "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
        "forceConsistentCasingInFileNames": true,         /* Ensure that casing is correct in imports. */
        "strict":true,                                    /* Enable all strict type-checking options. */
        "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
        "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
        "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
        "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
        "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
        "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
        "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
        "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
        "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
        "skipLibCheck": true                              /* Skip type checking all .d.ts files. */
    },
    "ts-node": {
        "require": ["tsconfig-paths/register"],
        "esm": true,
        "experimentalSpecifierResolution": "node"
    },
    "include": [ 
        "laboratory/**/*.ts",
        "packages/**/*.ts"
    ],
    "exclude": [ 
        "logs", "docs", "node_modules"
    ]
}

ㅁ 목적 : 텐서플로 1.x와 2.0의 차이점을 설명 
         1.x 프로그래밍 패러다임을 살펴본 후 2.x에서 사용할 수 있는 새로운 기능과 패러다임 설명

---------------------------------------------------------------------------------------------------------
1. 텐서플로 1.x의 이해
  1-1. 텐서플로 1.x 계산 그래프 구조
    다른 프로그램 언어와 다르게 만들고자 하는 신경망의 청사진을 만들어야 하며
    이를 위해, 프로그램을 계산 그래프(Computation graph)의 정의와 실행 두 부분으로 나눠야 함

    * 계산 그래프 : 노드(Node)와 에지(Edge)를 가진 네트워크
      - 노드 : 객체(텐서, tensors) 와 연산(operations)
      - 에지 : 연산 간에 흐르는 텐서
    * 그래프 실행 : 텐서와 연산 객체가 평가되는 환경을 캡슐화하는 세션 객체를 사용해 수행
    * 그래프를 사용하는 이유
      ① (심층)신경망을 설명해 줄 수 있는 자연스러운 비유
      ② 공통 하위 표현식을 제거하고, 커널을 합치고, 중복 표현식을 제거해서 자동으로 최적화
      ③ 훈련 중에 쉽게 배포할 수 있으며, CPU/GPU/TPU 같은 다양한 환경과
        클라우드, IoT, 모바일, 기존 서버 같은 다양한 환경에 배포 가능

  1-2. 상수, 변수, 플레이스홀더와 작업
    텐서플로는 간단히 말해 다양한 수학연산을 텐서로 정의하고 수행하는 라이브러리를 제공
    텐서는 기본적으로 n차원 배열임 : 스칼라-0차원, 벡터-1차원, 행쳘-2차원 텐서
    3가지 유형의 텐서를 제공 : 상수, 변수, 플레이스홀더(그래프에 값을 넣는데 사용, 보통 신경망 훈련시 새로운 훈련 예시 제공)

  1-3. 연산의 예시
    - 상수
    - 시퀀스
    - 랜덤 텐서
    - 변수 : 초기화, 저장, 플레이스홀더 정의

  1-4. 텐서플로 2.x에서의 1.x 예제
    1.x API는 신경망과 다른 많은 유형의 머신러닝 프로그램을 나타내는 계산 그래프를 생성/조작하는 유연한 방법을 제공
    2.x는 더 낮은 수준의 세부 정보를 추상화하는 높은 수준의 API를 제공

-----------------------------------------------------------------------------------------------------------
2. 텐서플로 2.x의 이해
  2-1
